var chai_1 = require('chai');
var enums_1 = require("../lib/enums");
var path_1 = require("path");
var Stdio = require("../lib/drivers/stdio");
describe("Omnisharp Local - Stdio", function () {
    it("must construct", function () {
        new Stdio({
            projectPath: path_1.resolve(__dirname, '../vendor/omnisharp-roslyn/')
        });
    });
    it("must construct with a specific driver", function () {
        new Stdio({
            driver: enums_1.Driver.Stdio,
            projectPath: path_1.resolve(__dirname, '../vendor/omnisharp-roslyn/')
        });
    });
    describe('state', function () {
        var server;
        this.timeout(20000);
        before(function () {
            server = new Stdio({
                driver: enums_1.Driver.Stdio,
                projectPath: path_1.resolve(__dirname, '../vendor/omnisharp-roslyn/')
            });
        });
        it("must connect", function (done) {
            chai_1.expect(server.currentState).to.be.eq(enums_1.DriverState.Disconnected);
            server.connect({});
            chai_1.expect(server.currentState).to.be.eq(enums_1.DriverState.Connecting);
            var sub = server.state.subscribe(function (state) {
                chai_1.expect(server.currentState).to.be.eq(enums_1.DriverState.Connected);
                sub.dispose();
                done();
            });
        });
        it("must disconnect", function (done) {
            var sub2 = server.state.subscribe(function (state) {
                chai_1.expect(server.currentState).to.be.eq(enums_1.DriverState.Disconnected);
                sub2.dispose();
                done();
            });
            server.disconnect();
        });
    });
    describe("properties", function () {
        this.timeout(20000);
        it('should implement the interface', function (done) {
            var server = new Stdio({
                driver: enums_1.Driver.Stdio,
                projectPath: path_1.resolve(__dirname, '../vendor/omnisharp-roslyn/')
            });
            var sub = server.state.subscribe(function (state) {
                chai_1.expect(server.currentState).to.be.not.null;
                chai_1.expect(server.commands).to.be.not.null;
                chai_1.expect(server.events).to.be.not.null;
                chai_1.expect(server.state).to.be.not.null;
                chai_1.expect(server.outstandingRequests).to.be.not.null;
                sub.dispose();
                done();
            });
            server.connect({});
        });
    });
    describe("properties", function () {
        this.timeout(20000);
        it('should disconnect if no project path is given', function (done) {
            var server = new Stdio({
                driver: enums_1.Driver.Stdio
            });
            var sub = server.state.subscribe(function (state) {
                chai_1.expect(state).to.be.eql(enums_1.DriverState.Error);
                done();
                sub.dispose();
            });
            server.connect({});
        });
        it('should disconnect if no an invalid project path is given', function (done) {
            var server = new Stdio({
                driver: enums_1.Driver.Stdio,
                projectPath: '/invalid/path/to/things/'
            });
            var sub = server.state.subscribe(function (state) {
                var sub2 = server.state.subscribe(function (state) {
                    chai_1.expect(state).to.be.eql(enums_1.DriverState.Error);
                    done();
                    sub2.dispose();
                });
                chai_1.expect(state).to.be.eql(enums_1.DriverState.Connecting);
                sub.dispose();
            });
            server.connect({});
        });
    });
});
