var rx_1 = require("rx");
var _ = require('lodash');
var ObservationClientBase = (function () {
    function ObservationClientBase(clients) {
        var _this = this;
        if (clients === void 0) { clients = []; }
        this.clients = clients;
        this._clientsSubject = new rx_1.ReplaySubject(1);
        this.onNext = function () { return _this._clientsSubject.onNext(_this.clients.slice()); };
        this.projectAdded = this.makeMergeObserable(function (client) { return client.projectAdded; });
        this.projectChanged = this.makeMergeObserable(function (client) { return client.projectChanged; });
        this.projectRemoved = this.makeMergeObserable(function (client) { return client.projectRemoved; });
        this.error = this.makeMergeObserable(function (client) { return client.error; });
        this.msBuildProjectDiagnostics = this.makeMergeObserable(function (client) { return client.msBuildProjectDiagnostics; });
        this.packageRestoreStarted = this.makeMergeObserable(function (client) { return client.packageRestoreStarted; });
        this.packageRestoreFinished = this.makeMergeObserable(function (client) { return client.packageRestoreFinished; });
        this.unresolvedDependencies = this.makeMergeObserable(function (client) { return client.unresolvedDependencies; });
        this.events = this.makeMergeObserable(function (client) { return client.events; });
        this.commands = this.makeMergeObserable(function (client) { return client.commands; });
        this.state = this.makeMergeObserable(function (client) { return client.state; });
        this.status = this.makeMergeObserable(function (client) { return client.status; });
        this.requests = this.makeMergeObserable(function (client) { return client.requests; });
        this.responses = this.makeMergeObserable(function (client) { return client.responses; });
        this.errors = this.makeMergeObserable(function (client) { return client.errors; });
        this.onNext();
    }
    ObservationClientBase.prototype.makeMergeObserable = function (selector) {
        return this._clientsSubject.flatMapLatest(function (clients) { return rx_1.Observable.merge.apply(rx_1.Observable, clients.map(selector)); }).share();
    };
    ObservationClientBase.prototype.observe = function (selector) {
        return this.makeMergeObserable(selector);
    };
    ObservationClientBase.prototype.add = function (client) {
        this.clients.push(client);
        this.onNext();
    };
    ObservationClientBase.prototype.remove = function (client) {
        _.pull(this.clients, client);
        this.onNext();
    };
    ObservationClientBase.prototype.removeAll = function () {
        this.clients = [];
        this.onNext();
    };
    return ObservationClientBase;
})();
exports.ObservationClientBase = ObservationClientBase;
var CombinationClientBase = (function () {
    function CombinationClientBase(clients) {
        var _this = this;
        if (clients === void 0) { clients = []; }
        this.clients = clients;
        this._clientsSubject = new rx_1.ReplaySubject(1);
        this.onNext = function () { return _this._clientsSubject.onNext(_this.clients.slice()); };
        this.projectAdded = this.makeCombineObserable(function (client) { return client.projectAdded; });
        this.projectChanged = this.makeCombineObserable(function (client) { return client.projectChanged; });
        this.projectRemoved = this.makeCombineObserable(function (client) { return client.projectRemoved; });
        this.error = this.makeCombineObserable(function (client) { return client.error; });
        this.msBuildProjectDiagnostics = this.makeCombineObserable(function (client) { return client.msBuildProjectDiagnostics; });
        this.packageRestoreStarted = this.makeCombineObserable(function (client) { return client.packageRestoreStarted; });
        this.packageRestoreFinished = this.makeCombineObserable(function (client) { return client.packageRestoreFinished; });
        this.unresolvedDependencies = this.makeCombineObserable(function (client) { return client.unresolvedDependencies; });
        this.state = this.makeCombineObserable(function (client) { return client.state; });
        this.status = this.makeCombineObserable(function (client) { return client.status; });
        this.onNext();
    }
    CombinationClientBase.prototype.makeCombineObserable = function (selector) {
        // Caches the value, so that when the underlying clients change
        // we can start with the old value of the remaining clients
        var cache = {};
        return this._clientsSubject.flatMapLatest(function (clients) {
            // clean up after ourselves.
            var removal = _.difference(_.keys(cache), clients.map(function (z) { return z.uniqueId; }));
            _.each(removal, function (z) { return delete cache[z]; });
            return rx_1.Observable.combineLatest(clients.map(function (z) { return selector(z).startWith(cache[z.uniqueId]); }), function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i - 0] = arguments[_i];
                }
                return values.map(function (value, index) {
                    cache[clients[index].uniqueId] = value;
                    return {
                        key: clients[index].uniqueId,
                        value: value
                    };
                });
            });
        }).share();
    };
    CombinationClientBase.prototype.observe = function (selector) {
        return this.makeCombineObserable(selector);
    };
    CombinationClientBase.prototype.add = function (client) {
        this.clients.push(client);
        this.onNext();
    };
    CombinationClientBase.prototype.remove = function (client) {
        _.pull(this.clients, client);
        this.onNext();
    };
    CombinationClientBase.prototype.removeAll = function () {
        this.clients = [];
        this.onNext();
    };
    return CombinationClientBase;
})();
exports.CombinationClientBase = CombinationClientBase;
