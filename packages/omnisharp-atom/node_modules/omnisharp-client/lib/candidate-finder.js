var _ = require('lodash');
var path_1 = require('path');
var rx_1 = require("rx");
var sepRegex = /[\\|\/]/g;
var glob = rx_1.Observable.fromNodeCallback(require('globby'));
var solutionFilesToSearch = ['global.json', '*.sln'];
var projectFilesToSearch = ['project.json', '*.csproj'];
var scriptCsFilesToSearch = ['*.csx'];
function findCandidates(location, logger) {
    location = _.trimRight(location, path_1.sep);
    var solutionCandidates = searchForCandidates(location, solutionFilesToSearch, logger);
    var projectCandidates = searchForCandidates(location, projectFilesToSearch, logger);
    var scriptCsCandidates = searchForCandidates(location, scriptCsFilesToSearch, logger);
    return rx_1.Observable.zip(solutionCandidates, projectCandidates, scriptCsCandidates, function (solutionCandidates, projectCandidates, scriptCsCandidates) {
        var candidates = squashCandidates(solutionCandidates.concat(projectCandidates)).concat(scriptCsCandidates);
        return _.unique(candidates)
            .map(function (z) { return z.split(sepRegex).join(path_1.sep); });
    })
        .tapOnNext(function (candidates) { return logger.log("Omni Project Candidates: Found " + candidates); });
}
exports.findCandidates = findCandidates;
function squashCandidates(candidates) {
    var rootCandidateCount = getMinCandidate(candidates);
    var r = _.unique(candidates.filter(function (z) { return z.split(sepRegex).length === rootCandidateCount; }));
    return r;
}
function getMinCandidate(candidates) {
    if (!candidates.length)
        return -1;
    return _.min(candidates, function (z) {
        return z.split(sepRegex).length;
    }).split(sepRegex).length;
}
function searchForCandidates(location, filesToSearch, logger) {
    var locations = location.split(path_1.sep);
    locations = locations.map(function (loc, index) {
        return _.take(locations, locations.length - index).join(path_1.sep);
    });
    // TODO: Searching is expensive, should we control the max depth?
    // locations = _.take(locations, 5);
    var rootObservable = rx_1.Observable.from(locations, function (x) { return x; }, rx_1.Scheduler.timeout)
        .map(function (loc) { return ({
        loc: loc,
        files: filesToSearch.map(function (fileName) { return path_1.join(loc, fileName); })
    }); })
        .flatMap(function (_a) {
        var loc = _a.loc, files = _a.files;
        logger.log("Omni Project Candidates: Searching " + loc + " for " + filesToSearch);
        return rx_1.Observable.from(files, function (x) { return x; }, rx_1.Scheduler.timeout)
            .flatMap(function (file) { return glob([file]); })
            .selectMany(function (x) { return rx_1.Observable.from(x); })
            .map(function (file) { return path_1.dirname(file); })
            .distinct();
    })
        .take(1)
        .toArray();
    return rootObservable;
}
